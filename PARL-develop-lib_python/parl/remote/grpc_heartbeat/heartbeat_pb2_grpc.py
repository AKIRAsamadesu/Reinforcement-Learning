#   Copyright (c) 2020 PaddlePaddle Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from parl.remote.grpc_heartbeat import heartbeat_pb2 as heartbeat__pb2


class GrpcHeartbeatStub(object):
    """The hearbeat service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Send = channel.unary_unary(
            '/GrpcHeartbeat/Send',
            request_serializer=heartbeat__pb2.Request.SerializeToString,
            response_deserializer=heartbeat__pb2.Reply.FromString,
        )


class GrpcHeartbeatServicer(object):
    """The hearbeat service definition.
    """

    def Send(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GrpcHeartbeatServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Send':
        grpc.unary_unary_rpc_method_handler(
            servicer.Send,
            request_deserializer=heartbeat__pb2.Request.FromString,
            response_serializer=heartbeat__pb2.Reply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'GrpcHeartbeat', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler, ))


# This class is part of an EXPERIMENTAL API.
class GrpcHeartbeat(object):
    """The hearbeat service definition.
    """

    @staticmethod
    def Send(request,
             target,
             options=(),
             channel_credentials=None,
             call_credentials=None,
             insecure=False,
             compression=None,
             wait_for_ready=None,
             timeout=None,
             metadata=None):
        return grpc.experimental.unary_unary(
            request, target, '/GrpcHeartbeat/Send',
            heartbeat__pb2.Request.SerializeToString,
            heartbeat__pb2.Reply.FromString, options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout,
            metadata)
